// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { AuthJwtLoginData, AuthJwtLoginResponse, AuthJwtLoginError, AuthJwtLogoutData, RegisterRegisterData, RegisterRegisterResponse, RegisterRegisterError, ResetForgotPasswordData, ResetForgotPasswordError, ResetResetPasswordData, ResetResetPasswordError, VerifyRequestTokenData, VerifyRequestTokenError, VerifyVerifyData, VerifyVerifyResponse, VerifyVerifyError, UsersCurrentUserData, UsersCurrentUserResponse, UsersPatchCurrentUserData, UsersPatchCurrentUserResponse, UsersPatchCurrentUserError, UsersDeleteUserData, UsersDeleteUserResponse, UsersDeleteUserError, UsersUserData, UsersUserResponse, UsersUserError, UsersPatchUserData, UsersPatchUserResponse, UsersPatchUserError, ReadItemData, ReadItemResponse, CreateItemData, CreateItemResponse, CreateItemError, DeleteItemData, DeleteItemError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Auth:Jwt.Login
 */
export const authJwtLogin = <ThrowOnError extends boolean = false>(options: Options<AuthJwtLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthJwtLoginResponse, AuthJwtLoginError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/auth/jwt/login',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Auth:Jwt.Logout
 */
export const authJwtLogout = <ThrowOnError extends boolean = false>(options?: Options<AuthJwtLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/jwt/logout',
        ...options
    });
};

/**
 * Register:Register
 */
export const registerRegister = <ThrowOnError extends boolean = false>(options: Options<RegisterRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterRegisterResponse, RegisterRegisterError, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reset:Forgot Password
 */
export const resetForgotPassword = <ThrowOnError extends boolean = false>(options: Options<ResetForgotPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, ResetForgotPasswordError, ThrowOnError>({
        url: '/auth/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reset:Reset Password
 */
export const resetResetPassword = <ThrowOnError extends boolean = false>(options: Options<ResetResetPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, ResetResetPasswordError, ThrowOnError>({
        url: '/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Verify:Request-Token
 */
export const verifyRequestToken = <ThrowOnError extends boolean = false>(options: Options<VerifyRequestTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, VerifyRequestTokenError, ThrowOnError>({
        url: '/auth/request-verify-token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Verify:Verify
 */
export const verifyVerify = <ThrowOnError extends boolean = false>(options: Options<VerifyVerifyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VerifyVerifyResponse, VerifyVerifyError, ThrowOnError>({
        url: '/auth/verify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Users:Current User
 */
export const usersCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<UsersCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersCurrentUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * Users:Patch Current User
 */
export const usersPatchCurrentUser = <ThrowOnError extends boolean = false>(options: Options<UsersPatchCurrentUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersPatchCurrentUserResponse, UsersPatchCurrentUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Users:Delete User
 */
export const usersDeleteUser = <ThrowOnError extends boolean = false>(options: Options<UsersDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersDeleteUserResponse, UsersDeleteUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Users:User
 */
export const usersUser = <ThrowOnError extends boolean = false>(options: Options<UsersUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersUserResponse, UsersUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Users:Patch User
 */
export const usersPatchUser = <ThrowOnError extends boolean = false>(options: Options<UsersPatchUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersPatchUserResponse, UsersPatchUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read Item
 */
export const readItem = <ThrowOnError extends boolean = false>(options?: Options<ReadItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/items/',
        ...options
    });
};

/**
 * Create Item
 */
export const createItem = <ThrowOnError extends boolean = false>(options: Options<CreateItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateItemResponse, CreateItemError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/items/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Item
 */
export const deleteItem = <ThrowOnError extends boolean = false>(options: Options<DeleteItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteItemError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/items/{item_id}',
        ...options
    });
};